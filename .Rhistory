s1 <- demand_func_validate(all_demand_regions[2])
cv1 <- demand_func_validate(all_demand_regions[3])
ca1 <- demand_func_validate(all_demand_regions[4])
ca1
cv1
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- region
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
pull_region = region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
return(version)
}
n1 <- demand_func_validate(all_demand_regions[1])
s1 <- demand_func_validate(all_demand_regions[2])
cv1 <- demand_func_validate(all_demand_regions[3])
ca1 <- demand_func_validate(all_demand_regions[4])
n1
s1
pull_region
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- ifelse(region=="California", "ca", str_to_lower(region))
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
pull_region = region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
return(version)
}
n1 <- demand_func_validate(all_demand_regions[1])
n1
n1 <- demand_func_validate(all_demand_regions[1])
n1
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- ifelse(region=="California", "ca", str_to_lower(region))
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
region = ifelse(region=="California", "ca", str_to_lower(region)),
pull_region = pull_region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
return(version)
}
n1 <- demand_func_validate(all_demand_regions[1])
n1
name(demand_func_validate(all_demand_regions[1]))
n1
name(n1)
names(n1)
demand_func_validate(all_demand_regions[1])
demand_func_validate(all_demand_regions[1])$region
paste0(demand_func_validate(all_demand_regions[1])$region, "_demand")
?set
demand_func_df(all_demand_regions[1])
demand_func_validate(all_demand_regions[1])
n1
append(n1, s1)
c(n1, s1)
list(n1)
names(list(n1))
names(list(n1)) <- n1$region
n1
n1$region
n1[[region]]
n1[["region"]]
paste0(n1[["region"]], "_demand")
names(list(n1))
names(list(n1)) <- paste0(n1[["region"]], "_demand")
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- ifelse(region=="California", "ca", str_to_lower(region))
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
region = ifelse(region=="California", "ca", str_to_lower(region)),
pull_region = pull_region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
return(list(version))
}
demand_file_name
version
library(tidyverse)
library(readxl)
demand_hires <- list.files(
path = "data",  # Assuming the files are in a "data" folder
pattern = "^Occupation.*?(NCV|SCV|CVML|California).*\\.xlsx$",
full.names = T,
ignore.case = TRUE
)
# Step 1: Identify problematic columns
find_problematic_columns <- function(df, pattern) {
cols_with_issues <- vector("logical", length(names(df)))
for (l in seq_along(names(df))) {
cols_with_issues[l] <- any(str_detect(df[[l]], pattern))
}
return(na.omit(names(df)[cols_with_issues]))
}
# Step 2: Fix "<10" values
fix_under10 <- function(df, col_name) {
row <- which(str_detect(df[[col_name]], "<10"))
# Replace "<10" with "0"
df[row, col_name] <- "0"
# Convert the column to numeric
df[[col_name]] <- as.numeric(df[[col_name]]) %>% round()
# Extrapolate missing values
df[[col_name]][row] <- last(df[[col_name]]) - sum(df[[col_name]][1:(nrow(df) - 1)])
return(df)
}
# Step 3: Handle "Insf. Data"
fix_insf_data <- function(df, col_name, col_index) {
rows <- which(str_detect(df[[col_name]], "Insf. Data"))
for (row in rows) {
if (col_index == 5) {
# Calculate "2023 - 2028 Change"
df[row, col_name] <- as.character(
as.numeric(df[[4]][row]) - as.numeric(df[[3]][row])  # 2028 Jobs...4 - 2023 Jobs...3
)
} else if (col_index == 6) {
# Calculate "2023 - 2028 % Change"
df[row, col_name] <- as.character(
round((as.numeric(df[[4]][row]) - as.numeric(df[[3]][row])) / as.numeric(df[[3]][row]), 3)
)
} else {
# Replace "Insf. Data" with NA for other columns
df[row, col_name] <- NA
}
}
# Convert column to numeric
df[[col_name]] <- suppressWarnings(as.numeric(df[[col_name]]))
return(df)
}
# Step 4: Main processing function
process_dataframe <- function(df) {
# Identify columns with "<10"
columns_with_under10 <- find_problematic_columns(df, "<10")
# Fix "<10" values
for (col in columns_with_under10) {
df <- fix_under10(df, col)
}
# Identify columns with "Insf. Data"
columns_with_insf_data <- find_problematic_columns(df, "Insf. Data")
# Fix "Insf. Data"
for (col_name in columns_with_insf_data) {
col_index <- which(names(df) == col_name)
df <- fix_insf_data(df, col_name, col_index)
}
return(df)
}
# Step 5: Wrapper function for cleaning
demand_func <- function(df) {
df <- process_dataframe(df)
df <- df %>%
mutate(
across(everything(), ~replace_na(., 0))
)
return(df)
}
not_in_selected_region <- function(data){
if(any(data$SOC=="* Your selected institution is not in the selected region.", na.rm = T)){
data <- data[-which(data$SOC=="* Your selected institution is not in the selected region."),]
return(data)
} else {
return(data)
}
}
remove_added_rows <- function(table) {
if (sum(tail(is.na(pull(table, 1)), 2)) == 2){
fixed <- table[1:(nrow(table)-2),]
return(fixed)
} else {
return(table)
}
}
demand_hires
demand_func_df <- function(region) {
read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Occs") %>% na.omit() %>% suppressMessages() %>% demand_func() %>% not_in_selected_region() %>% remove_added_rows()
}
date_match <- paste0(lubridate::month(1:12, label = T, abbr = F), " ", year(Sys.Date()))
demand_func_validate <- function(region){
r <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 2)%>% suppressMessages()  %>% na.exclude()
l <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 1)%>% suppressMessages() %>%  na.exclude()
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date_s1 <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))
file_date <- file_date_s1[which(file_date_s1 %in% date_match)]
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
region = region,
pull_type = pull_type,
pull_range = pull_range,
pull_region = pull_region,
file_month = file_month,
file_year = file_year
)
return(version)
}
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- ifelse(region=="California", "ca", str_to_lower(region))
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <-
list(
region = ifelse(region=="California", "ca", str_to_lower(region)),
pull_region = pull_region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
n_version <- list(version)
names(n_version) <- region
return(n_version)
}
all_demand_regions <- c("NCV", "SCV", "CVML", "California")
ncv_demand <- demand_func_df(all_demand_regions[1])
scv_demand <- demand_func_df(all_demand_regions[2])
cvml_demand <-demand_func_df(all_demand_regions[3])
ca_demand <-  demand_func_df(all_demand_regions[4])
demand_files <- list()
demand_files[["version"]] <- list()
overall_pull_type <- vector("character")
overall_pull_range <- vector("character")
overall_file_month <- vector("character")
overall_file_year <- vector("character")
for(regions in all_demand_regions){
pull_type_i <- flatten(demand_func_validate(regions))[["pull_type"]]
pull_range_i <- flatten(demand_func_validate(regions))[["pull_range"]]
file_month_i <- flatten(demand_func_validate(regions))[["file_month"]]
file_year_i <- flatten(demand_func_validate(regions))[["file_year"]]
overall_pull_type <-  unique(c(overall_pull_type, pull_type_i))
overall_pull_range <- unique(c(overall_pull_range, pull_range_i))
overall_file_month <-  unique(c(overall_file_month, file_month_i))
overall_file_year <-  unique(c(overall_file_year, file_year_i))
rm(pull_type_i, pull_range_i, file_month_i, file_year_i)
}
version <- list(overall = c(paste0(overall_file_month," ", overall_file_year), overall_pull_type, overall_pull_range))
for(regions in all_demand_regions){
version <- c(version, demand_func_validate(regions))
}
demand_files[["version"]] <- version
demand_files[["n"]] <- ncv_demand
demand_files[["s"]] <- scv_demand
demand_files[["cvml"]] <- cvml_demand
demand_files[["ca"]] <- ca_demand
demand_file_name <- paste0("demand_files_", demand_files[["version"]][["overall"]][1], ".rds")
str_remove_all(demand_file_name, "\\s")
saveRDS(demand_files, str_remove_all(demand_file_name, "\\s"))
demand_files[["version"]][["overall"]][1]
demand_files[["version"]][["overall"]][1]
demand_file_name_saving <- str_remove_all(demand_file_name, "\\s"))
demand_file_name_saving <- str_remove_all(demand_file_name, "\\s")
demand_file_name_saving
demand_file_name_saving <- str_remove_all(demand_files[["version"]][["overall"]][1], "\\s")
demand_file_name_saving
demand_file_name <- paste0("demand_files_", demand_file_name_saving, ".rds")
demand_file_name
demand_file_name_saving
demand_file_name_saving
new_folder_name <- paste0(old_folder_name, demand_file_name_saving)
# Define the old and new folder names
old_folder_name <- "data"
new_folder_name <- paste0(old_folder_name, demand_file_name_saving)
new_folder_name
new_folder_name <- paste0("data_", demand_file_name_saving)
# Define the old and new folder names
old_folder_name <- "data"
new_folder_name <- paste0("data_", demand_file_name_saving)
new_folder_name
# Define the old and new folder names
old_folder_name <- "data"
# 1. Check if the source folder actually exists
if (dir.exists(old_folder_name)) {
# 2. Check if the new folder name is already in use
if (!dir.exists(new_folder_name)) {
# 3. If everything is clear, rename the folder
file.rename(from = old_folder_name, to = new_folder_name)
print(paste("Folder successfully renamed from", old_folder_name, "to", new_folder_name))
} else {
print(paste("Error: A folder named '", new_folder_name, "' already exists."))
}
} else {
print(paste("Error: The source folder '", old_folder_name, "' does not exist."))
}
dir.create("data")
library(tidyverse)
library(readxl)
demand_hires <- list.files(
path = "data_September2025",  # Assuming the files are in a "data" folder
pattern = "^Occupation.*?(NCV|SCV|CVML|California).*\\.xlsx$",
full.names = T,
ignore.case = TRUE
)
# Step 1: Identify problematic columns
find_problematic_columns <- function(df, pattern) {
cols_with_issues <- vector("logical", length(names(df)))
for (l in seq_along(names(df))) {
cols_with_issues[l] <- any(str_detect(df[[l]], pattern))
}
return(na.omit(names(df)[cols_with_issues]))
}
fix_columns <- function(df){
removeables <- c("<10", "Insf. Data")
for (remove_me in removeables){
fix_us <- find_problematic_columns(df, remove_me)
for (columns in fix_us){
new_column <- df[[columns]] %>%
na_if(remove_me) %>%
as.numeric() %>%
replace_na(0)
if(remove_me=="<10"){
new_column <- round(new_column)
}
df[[columns]] <- new_column
}
}
return(df)
}
find_problematic_columns(cvml_demand, "Insf. Data")
cvml_demand
demand_func_df <- function(region) {
read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Occs") %>% na.omit() #%>% fix_columns() %>% suppressMessages() #%>% process_dataframe() #%>% demand_func() #%>% not_in_selected_region() #%>% remove_added_rows()
}
cvml_demand <- demand_func_df(all_demand_regions[3])
find_problematic_columns(cvml_demand, "Insf. Data")
readRDS("demand_files_September2025.rds")[["cvml"]] %>% View()
all_demand_regions[3]
demand_hires
cvml_demand <- demand_func_df(all_demand_regions[3])
View(cvml_demand)
fix_columns <- function(df){
removeables <- c("<10", "Insf. Data")
for (remove_me in removeables){
fix_us <- find_problematic_columns(df, remove_me)
for (columns in fix_us){
new_column <- df[[columns]] %>%
na_if(remove_me) %>%
as.numeric() %>%
replace_na(0)
if(remove_me=="<10"){
new_column <- round(new_column)
} else {
new_column <- round(new_column, 2)
}
df[[columns]] <- new_column
}
}
return(df)
}
demand_func_df <- function(region) {
read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Occs") %>% na.omit() %>% fix_columns() %>% suppressMessages() #%>% process_dataframe() #%>% demand_func() #%>% not_in_selected_region() #%>% remove_added_rows()
}
cvml_demand <- demand_func_df(all_demand_regions[3])
cvml_demand
date_match <- paste0(lubridate::month(1:12, label = T, abbr = F), " ", year(Sys.Date()))
demand_func_validate <- function(region){
r <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 2)%>% suppressMessages()  %>% na.exclude()
l <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 1)%>% suppressMessages() %>%  na.exclude()
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date_s1 <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))
file_date <- file_date_s1[which(file_date_s1 %in% date_match)]
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
region = region,
pull_type = pull_type,
pull_range = pull_range,
pull_region = pull_region,
file_month = file_month,
file_year = file_year
)
return(version)
}
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- ifelse(region=="California", "ca", str_to_lower(region))
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <-
list(
region = ifelse(region=="California", "ca", str_to_lower(region)),
pull_region = pull_region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
n_version <- list(version)
names(n_version) <- region
return(n_version)
}
all_demand_regions <- c("NCV", "SCV", "CVML", "California")
ncv_demand <- demand_func_df(all_demand_regions[1])
scv_demand <- demand_func_df(all_demand_regions[2])
cvml_demand <-demand_func_df(all_demand_regions[3])
ca_demand <-  demand_func_df(all_demand_regions[4])
demand_files <- list()
demand_files[["version"]] <- list()
overall_pull_type <- vector("character")
overall_pull_range <- vector("character")
overall_file_month <- vector("character")
overall_file_year <- vector("character")
for(regions in all_demand_regions){
pull_type_i <- flatten(demand_func_validate(regions))[["pull_type"]]
pull_range_i <- flatten(demand_func_validate(regions))[["pull_range"]]
file_month_i <- flatten(demand_func_validate(regions))[["file_month"]]
file_year_i <- flatten(demand_func_validate(regions))[["file_year"]]
overall_pull_type <-  unique(c(overall_pull_type, pull_type_i))
overall_pull_range <- unique(c(overall_pull_range, pull_range_i))
overall_file_month <-  unique(c(overall_file_month, file_month_i))
overall_file_year <-  unique(c(overall_file_year, file_year_i))
rm(pull_type_i, pull_range_i, file_month_i, file_year_i)
}
version <- list(overall = c(paste0(overall_file_month," ", overall_file_year), overall_pull_type, overall_pull_range))
for(regions in all_demand_regions){
version <- c(version, demand_func_validate(regions))
}
demand_files[["version"]] <- version
demand_files[["n"]] <- ncv_demand
demand_files[["s"]] <- scv_demand
demand_files[["cvml"]] <- cvml_demand
demand_files[["ca"]] <- ca_demand
demand_file_name_saving <- str_remove_all(demand_files[["version"]][["overall"]][1], "\\s")
demand_file_name <- paste0("demand_files_", demand_file_name_saving, ".rds")
saveRDS(demand_files, demand_file_name)
demand_files[["version"]][["overall"]][1]
demand_files
View(cvml_demand)
