pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <-
list(
region = ifelse(region=="California", "ca", str_to_lower(region)),
pull_region = pull_region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
n_version <- list(version)
names(n_version) <- region
return(n_version)
}
all_demand_regions <- c("NCV", "SCV", "CVML", "California")
ncv_demand <- demand_func_df(all_demand_regions[1])
scv_demand <- demand_func_df(all_demand_regions[2])
cvml_demand <-demand_func_df(all_demand_regions[3])
ca_demand <-  demand_func_df(all_demand_regions[4])
demand_files <- list()
demand_files[["version"]] <- list()
overall_pull_type <- vector("character")
overall_pull_range <- vector("character")
overall_file_month <- vector("character")
overall_file_year <- vector("character")
for(regions in all_demand_regions){
pull_type_i <- flatten(demand_func_validate(regions))[["pull_type"]]
pull_range_i <- flatten(demand_func_validate(regions))[["pull_range"]]
file_month_i <- flatten(demand_func_validate(regions))[["file_month"]]
file_year_i <- flatten(demand_func_validate(regions))[["file_year"]]
overall_pull_type <-  unique(c(overall_pull_type, pull_type_i))
overall_pull_range <- unique(c(overall_pull_range, pull_range_i))
overall_file_month <-  unique(c(overall_file_month, file_month_i))
overall_file_year <-  unique(c(overall_file_year, file_year_i))
rm(pull_type_i, pull_range_i, file_month_i, file_year_i)
}
version <- list(overall = c(paste0(overall_file_month," ", overall_file_year), overall_pull_type, overall_pull_range))
for(regions in all_demand_regions){
version <- c(version, demand_func_validate(regions))
}
demand_files[["version"]] <- version
demand_files[["n"]] <- ncv_demand
demand_files[["s"]] <- scv_demand
demand_files[["cvml"]] <- cvml_demand
demand_files[["ca"]] <- ca_demand
demand_file_name_saving <- str_remove_all(demand_files[["version"]][["overall"]][1], "\\s")
demand_file_name <- paste0("demand_files_", demand_file_name_saving, ".rds")
saveRDS(demand_files, demand_file_name)
demand_files[["version"]][["overall"]][1]
demand_files
View(cvml_demand)
library(readxl)
# List files matching the criteria
file_path <- file.path(getwd(), "data")
xls_files <- list.files("data", pattern = "\\.xls$")
xlsx_files <- list.files("data", pattern = "\\.xlsx")
if (length(xls_files) > 0 & length(xlsx_files)==0){
ps_script_path <- file.path(getwd(), "convert.ps1")
#source_file <- "convert.ps1"
#destination_file <- "../convert.ps1" # One directory up from R's current working directory
source_path_full <- normalizePath(source_file, winslash="\\", mustWork=TRUE)
#destination_path_full <- normalizePath(destination_file, winslash="\\", mustWork=FALSE) # Destination might not exist yet
# Path to the PowerShell script that performs the move
#move_ps_script <- normalizePath("move_convert_script.ps1", winslash="\\", mustWork=TRUE)
system2(
"powershell.exe",
args = c(
"-NoProfile",
"-ExecutionPolicy", "Bypass",
"-File", paste0('"', ps_script_path, '"')
#"-SourcePath", paste0('"', source_path_full, '"')#,
#      "-DestinationPath", paste0('"', destination_path_full, '"')
),
stdout = TRUE, # Capture output for debugging
stderr = TRUE, # Capture errors for debugging
wait = TRUE
)
setwd("data")
print(getwd())
output <- system2(
"powershell.exe",
args = c("-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "../convert.ps1"),
stdout = TRUE, # Capture standard output
stderr = TRUE # Capture standard error
)
cat(output)
print(list.files())
setwd("..")
print(getwd())
} else {
print(".xlsx files present")
}
library(readxl)
file_path <- file.path(getwd(), "data")
xls_files <- list.files("data", pattern = "\\.xls$")
xlsx_files <- list.files("data", pattern = "\\.xlsx")
library(readxl)
# List files matching the criteria
file_path <- file.path(getwd(), "data")
xls_files <- list.files("data", pattern = "\\.xls$")
xlsx_files <- list.files("data", pattern = "\\.xlsx")
if (length(xls_files) > 0 & length(xlsx_files)==0){
ps_script_path <- file.path(getwd(), "convert.ps1")
#source_file <- "convert.ps1"
#destination_file <- "../convert.ps1" # One directory up from R's current working directory
source_path_full <- normalizePath(ps_script_path, winslash="\\", mustWork=TRUE)
#destination_path_full <- normalizePath(destination_file, winslash="\\", mustWork=FALSE) # Destination might not exist yet
# Path to the PowerShell script that performs the move
#move_ps_script <- normalizePath("move_convert_script.ps1", winslash="\\", mustWork=TRUE)
system2(
"powershell.exe",
args = c(
"-NoProfile",
"-ExecutionPolicy", "Bypass",
"-File", paste0('"', ps_script_path, '"')
#"-SourcePath", paste0('"', source_path_full, '"')#,
#      "-DestinationPath", paste0('"', destination_path_full, '"')
),
stdout = TRUE, # Capture output for debugging
stderr = TRUE, # Capture errors for debugging
wait = TRUE
)
setwd("data")
print(getwd())
output <- system2(
"powershell.exe",
args = c("-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "../convert.ps1"),
stdout = TRUE, # Capture standard output
stderr = TRUE # Capture standard error
)
cat(output)
print(list.files())
setwd("..")
print(getwd())
} else {
print(".xlsx files present")
}
library(tidyverse)
library(readxl)
month()
month(Sys.Date())
month(Sys.Date(), F)
month(Sys.Date(), T)
month(Sys.Date(), T, T)
?month
month(Sys.Date(), T, F)
paste0("data_",month(Sys.Date(), T, F), year(Sys.Date()))
demand_file_path
demand_file_path <- paste0("data_",month(Sys.Date(), T, F), year(Sys.Date()))
demand_file_path <- paste0("data_",month(Sys.Date(), T, F), year(Sys.Date()))
demand_hires <- list.files(
path = demand_file_path,  # Assuming the files are in a "data" folder
pattern = "^Occupation.*?(NCV|SCV|CVML|California).*\\.xlsx$",
full.names = T,
ignore.case = TRUE
)
# Step 1: Identify problematic columns
find_problematic_columns <- function(df, pattern) {
cols_with_issues <- vector("logical", length(names(df)))
for (l in seq_along(names(df))) {
cols_with_issues[l] <- any(str_detect(df[[l]], pattern))
}
return(na.omit(names(df)[cols_with_issues]))
}
fix_columns <- function(df){
removeables <- c("<10", "Insf. Data")
for (remove_me in removeables){
fix_us <- find_problematic_columns(df, remove_me)
for (columns in fix_us){
new_column <- df[[columns]] %>%
na_if(remove_me) %>%
as.numeric() %>%
replace_na(0)
if(remove_me=="<10"){
new_column <- round(new_column)
} else {
new_column <- round(new_column, 2)
}
df[[columns]] <- new_column
}
}
return(df)
}
demand_func_df <- function(region) {
read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Occs") %>% na.omit() %>% fix_columns() %>% suppressMessages() #%>% process_dataframe() #%>% demand_func() #%>% not_in_selected_region() #%>% remove_added_rows()
}
date_match <- paste0(lubridate::month(1:12, label = T, abbr = F), " ", year(Sys.Date()))
demand_func_validate <- function(region){
r <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 2)%>% suppressMessages()  %>% na.exclude()
l <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 1)%>% suppressMessages() %>%  na.exclude()
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date_s1 <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))
file_date <- file_date_s1[which(file_date_s1 %in% date_match)]
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
region = region,
pull_type = pull_type,
pull_range = pull_range,
pull_region = pull_region,
file_month = file_month,
file_year = file_year
)
return(version)
}
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- ifelse(region=="California", "ca", str_to_lower(region))
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <-
list(
region = ifelse(region=="California", "ca", str_to_lower(region)),
pull_region = pull_region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
n_version <- list(version)
names(n_version) <- region
return(n_version)
}
all_demand_regions <- c("NCV", "SCV", "CVML", "California")
ncv_demand <- demand_func_df(all_demand_regions[1])
demand_hires <- list.files(
path = demand_file_path,  # Assuming the files are in a "data" folder
pattern = "^Occupation.*?(NCV|SCV|CVML|California).*\\.xlsx$",
full.names = T,
ignore.case = TRUE
)
# Step 1: Identify problematic columns
find_problematic_columns <- function(df, pattern) {
cols_with_issues <- vector("logical", length(names(df)))
for (l in seq_along(names(df))) {
cols_with_issues[l] <- any(str_detect(df[[l]], pattern))
}
return(na.omit(names(df)[cols_with_issues]))
}
fix_columns <- function(df){
removeables <- c("<10", "Insf. Data")
for (remove_me in removeables){
fix_us <- find_problematic_columns(df, remove_me)
for (columns in fix_us){
new_column <- df[[columns]] %>%
na_if(remove_me) %>%
as.numeric() %>%
replace_na(0)
if(remove_me=="<10"){
new_column <- round(new_column)
} else {
new_column <- round(new_column, 2)
}
df[[columns]] <- new_column
}
}
return(df)
}
demand_func_df <- function(region) {
read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Occs") %>% na.omit() %>% fix_columns() %>% suppressMessages() #%>% process_dataframe() #%>% demand_func() #%>% not_in_selected_region() #%>% remove_added_rows()
}
date_match <- paste0(lubridate::month(1:12, label = T, abbr = F), " ", year(Sys.Date()))
demand_func_validate <- function(region){
r <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 2)%>% suppressMessages()  %>% na.exclude()
l <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 1)%>% suppressMessages() %>%  na.exclude()
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date_s1 <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))
file_date <- file_date_s1[which(file_date_s1 %in% date_match)]
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
region = region,
pull_type = pull_type,
pull_range = pull_range,
pull_region = pull_region,
file_month = file_month,
file_year = file_year
)
return(version)
}
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- ifelse(region=="California", "ca", str_to_lower(region))
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <-
list(
region = ifelse(region=="California", "ca", str_to_lower(region)),
pull_region = pull_region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
n_version <- list(version)
names(n_version) <- region
return(n_version)
}
all_demand_regions <- c("NCV", "SCV", "CVML", "California")
ncv_demand <- demand_func_df(all_demand_regions[1])
scv_demand <- demand_func_df(all_demand_regions[2])
ncv_demand <- demand_func_df(all_demand_regions[1])
all_demand_regions[1]
demand_func_df
demand_func_df(all_demand_regions[1])
all_demand_regions[1]
demand_files <- list()
demand_files[["version"]] <- list()
overall_pull_type <- vector("character")
overall_pull_range <- vector("character")
overall_file_month <- vector("character")
overall_file_year <- vector("character")
for(regions in all_demand_regions){
pull_type_i <- flatten(demand_func_validate(regions))[["pull_type"]]
pull_range_i <- flatten(demand_func_validate(regions))[["pull_range"]]
file_month_i <- flatten(demand_func_validate(regions))[["file_month"]]
file_year_i <- flatten(demand_func_validate(regions))[["file_year"]]
overall_pull_type <-  unique(c(overall_pull_type, pull_type_i))
overall_pull_range <- unique(c(overall_pull_range, pull_range_i))
overall_file_month <-  unique(c(overall_file_month, file_month_i))
overall_file_year <-  unique(c(overall_file_year, file_year_i))
rm(pull_type_i, pull_range_i, file_month_i, file_year_i)
}
version <- list(overall = c(paste0(overall_file_month," ", overall_file_year), overall_pull_type, overall_pull_range))
for(regions in all_demand_regions){
version <- c(version, demand_func_validate(regions))
}
demand_hires
demand_file_path <- paste0("data_",month(Sys.Date(), T, F), year(Sys.Date()))
demand_hires <- list.files(
path = demand_file_path,  # Assuming the files are in a "data" folder
pattern = "^Occupation.*?(NCV|SCV|CVML|California).*\\.xlsx$",
full.names = T,
ignore.case = TRUE
)
demand_hires
demand_file_path
demand_file_path_new <- paste0("data_",month(Sys.Date(), T, F), year(Sys.Date()))
demand_hires <- list.files(
path = "data",  # Assuming the files are in a "data" folder
pattern = "^Occupation.*?(NCV|SCV|CVML|California).*\\.xlsx$",
full.names = T,
ignore.case = TRUE
)
demand_hires
demand_hires <- list.files(
path = "data",  # Assuming the files are in a "data" folder
pattern = "^Occupation.*?(NCV|SCV|CVML|California).*\\.xlsx$",
full.names = T,
ignore.case = TRUE
)
# Step 1: Identify problematic columns
find_problematic_columns <- function(df, pattern) {
cols_with_issues <- vector("logical", length(names(df)))
for (l in seq_along(names(df))) {
cols_with_issues[l] <- any(str_detect(df[[l]], pattern))
}
return(na.omit(names(df)[cols_with_issues]))
}
fix_columns <- function(df){
removeables <- c("<10", "Insf. Data")
for (remove_me in removeables){
fix_us <- find_problematic_columns(df, remove_me)
for (columns in fix_us){
new_column <- df[[columns]] %>%
na_if(remove_me) %>%
as.numeric() %>%
replace_na(0)
if(remove_me=="<10"){
new_column <- round(new_column)
} else {
new_column <- round(new_column, 2)
}
df[[columns]] <- new_column
}
}
return(df)
}
demand_func_df <- function(region) {
read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Occs") %>% na.omit() %>% fix_columns() %>% suppressMessages() #%>% process_dataframe() #%>% demand_func() #%>% not_in_selected_region() #%>% remove_added_rows()
}
date_match <- paste0(lubridate::month(1:12, label = T, abbr = F), " ", year(Sys.Date()))
demand_func_validate <- function(region){
r <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 2)%>% suppressMessages()  %>% na.exclude()
l <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters"), 1)%>% suppressMessages() %>%  na.exclude()
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date_s1 <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))
file_date <- file_date_s1[which(file_date_s1 %in% date_match)]
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <- list(
region = region,
pull_type = pull_type,
pull_range = pull_range,
pull_region = pull_region,
file_month = file_month,
file_year = file_year
)
return(version)
}
demand_func_validate <- function(region){
pull_df <- read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Parameters") %>% suppressMessages()
if(ncol(pull_df)==2){
r <- pull(pull_df, 2) %>% na.exclude()
l <- pull(pull_df, 1) %>% na.exclude()
} else {
l <- pull(pull_df, 1) %>% na.exclude()
r <- ifelse(region=="California", "ca", str_to_lower(region))
}
pull_type <- as.character(last(l))
pull_range <- as.character(l[which(str_detect(l, pattern = "\\d{4} \\- \\d{4}"))])
pull_region <- paste(r[-1], collapse = " | ")
file_date <- pull(read_excel(demand_hires[str_detect(demand_hires, pattern = region)], sheet = "Cover Page"))[5] %>% suppressMessages()
file_month <- str_split_1(file_date, " ")[1]
file_year <- str_split_1(file_date, " ")[2]
version <-
list(
region = ifelse(region=="California", "ca", str_to_lower(region)),
pull_region = pull_region,
pull_type = pull_type,
pull_range = pull_range,
file_month = file_month,
file_year = file_year
)
n_version <- list(version)
names(n_version) <- region
return(n_version)
}
all_demand_regions <- c("NCV", "SCV", "CVML", "California")
all_demand_regions <- c("NCV", "SCV", "CVML", "California")
ncv_demand <- demand_func_df(all_demand_regions[1])
scv_demand <- demand_func_df(all_demand_regions[2])
cvml_demand <-demand_func_df(all_demand_regions[3])
ca_demand <-  demand_func_df(all_demand_regions[4])
demand_files <- list()
demand_files[["version"]] <- list()
overall_pull_type <- vector("character")
overall_pull_range <- vector("character")
overall_file_month <- vector("character")
overall_file_year <- vector("character")
for(regions in all_demand_regions){
pull_type_i <- flatten(demand_func_validate(regions))[["pull_type"]]
pull_range_i <- flatten(demand_func_validate(regions))[["pull_range"]]
file_month_i <- flatten(demand_func_validate(regions))[["file_month"]]
file_year_i <- flatten(demand_func_validate(regions))[["file_year"]]
overall_pull_type <-  unique(c(overall_pull_type, pull_type_i))
overall_pull_range <- unique(c(overall_pull_range, pull_range_i))
overall_file_month <-  unique(c(overall_file_month, file_month_i))
overall_file_year <-  unique(c(overall_file_year, file_year_i))
rm(pull_type_i, pull_range_i, file_month_i, file_year_i)
}
version <- list(overall = c(paste0(overall_file_month," ", overall_file_year), overall_pull_type, overall_pull_range))
for(regions in all_demand_regions){
version <- c(version, demand_func_validate(regions))
}
demand_files[["version"]] <- version
demand_files[["n"]] <- ncv_demand
demand_files[["s"]] <- scv_demand
demand_files[["cvml"]] <- cvml_demand
demand_files[["ca"]] <- ca_demand
demand_file_name_saving <- str_remove_all(demand_files[["version"]][["overall"]][1], "\\s")
demand_file_name <- paste0("demand_files_", demand_file_name_saving, ".rds")
demand_file_name
saveRDS(demand_files, demand_file_name)
demand_files[["version"]][["overall"]][1]
# Define the old and new folder names
old_folder_name <- "data"
new_folder_name <- paste0("data_", demand_file_name_saving)
# 1. Check if the source folder actually exists
if (dir.exists(old_folder_name)) {
# 2. Check if the new folder name is already in use
if (!dir.exists(new_folder_name)) {
# 3. If everything is clear, rename the folder
file.rename(from = old_folder_name, to = new_folder_name)
print(paste("Folder successfully renamed from", old_folder_name, "to", new_folder_name))
} else {
print(paste("Error: A folder named '", new_folder_name, "' already exists."))
}
} else {
print(paste("Error: The source folder '", old_folder_name, "' does not exist."))
}
dir.create("data")
demand_files[["version"]]
